library(lme4)
dataclean<-dataclean[dataclean$RT.ms<=2000&dataclean$RT.ms>=-2000,]
dataclean$P<-ifelse(dataclean$Pred=="Pred",.5,-.5)
dataclean$PC<-scale(dataclean$P,T,F)
dataclean$EL<-ifelse(dataclean$Early.Late=="early",.5,-.5)
dataclean$ELC<-scale(dataclean$EL,T,F)
dataclean$RW<-ifelse(dataclean$Right.Wrong=="right",.5,-.5)
dataclean$RWC<-scale(dataclean$RW,T,F)
dataclean$LC<-ifelse(dataclean$Length=="Long",.5,-.5)
dataclean$LCC<-scale(dataclean$LC,T,F)
dataclean$LLW<-scale(dataclean$Character.Length.ms,T,T)
m0<-lmer(RT.ms~1+LCC+RWC+PC*ELC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m0)
m1<-lmer(RT.ms~1+LLW+LCC+RWC+PC*ELC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m1)
collapsed<-summaryBy(RT.ms~+Pred+Early.Late,FUN=sumtot,data=dataclean)
library(ggplot2)
main<-ggplot(collapsed,aes(Pred,RT.ms.m,fill=Early.Late)) + geom_bar(stat="identity", position="dodge",colour="black")+geom_errorbar(aes(ymax = RT.ms.m + RT.ms.se, ymin=RT.ms.m - RT.ms.se), position=position_dodge(width=0.9), width=0.2)
plot(main)
#P == Pred
dataclean$P<-ifelse(dataclean$Pred=="Pred",0,1)
# now the main effect of ELC refer to the effect of Early.Late when the question is predictable (because Pred is the reference level)
m1.pred<-lmer(RT.ms~1+LLW+LCC+RWC+P*ELC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m1.pred)
#P == Unpred
dataclean$P<-ifelse(dataclean$Pred=="Pred",1,0)
# now the main effect of ELC refer to the effect of Early.Late when the question is unpredictable (because Unpred is the reference level)
m1.unpred<-lmer(RT.ms~1+LLW+LCC+RWC+P*ELC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m1.unpred)
# now try adding an interaction between length of teh last word and early.late
dataclean$P<-ifelse(dataclean$Pred=="Pred",.5,-.5)
dataclean$PC<-scale(dataclean$P,T,F)
m3<-lmer(RT.ms~1+LLW*ELC+LCC+RWC+PC+ELC:PC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m3)
#try adding Qduration as covariate
dataclean$QD<-scale(dataclean$Qu.Length.ms,T,T)
m4<-lmer(RT.ms~1+LLW+LCC+QD+RWC+PC*ELC+(1+ELC||Subject)+(1|Sound.File),data=dataclean)
summary(m4)
library(retimes)
library(rstan)
library(ggplot2)
library(retimes)
library(rstan)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(123)
ads <- read.csv("exp2_adults.csv")
fives <- read.csv("exp2_fives.csv")
threes <- read.csv("exp2_threes.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,threes)#fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Subject, sep = "")
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/sd(tt$rt)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
model.matrix(~tt$Age)[,3]
model.matrix(~tt$Age)[,2]
model.matrix(~tt$Age)
summary(tt)
ads <- read.csv("exp2_adults.csv")
fives <- read.csv("exp2_fives.csv")
threes <- read.csv("exp2_threes.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,threes,fives)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Subject, sep = "")
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/sd(tt$rt)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
library(retimes)
library(rstan)
library(ggplot2)
library(retimes)
library(rstan)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(123)
ads <- read.csv("exp2_adults.csv")
fives <- read.csv("exp2_fives.csv")
threes <- read.csv("exp2_threes.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,threes,fives)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Subject, sep = "")
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/sd(tt$rt)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
library(retimes)
library(rstan)
library(ggplot2)
library(retimes)
library(rstan)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(123)
ads <- read.csv("exp2_adults.csv")
fives <- read.csv("exp2_fives.csv")
threes <- read.csv("exp2_threes.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,threes,fives)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Subject, sep = "")
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/sd(tt$rt)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 100)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
tt[7110,]
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = scale(tt$CharacterLength.ms),
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
scale(tt$CharacterLength.ms)
scale(tt$CharacterLength.ms)[1]
dims(scale(tt$CharacterLength.ms))
dim(scale(tt$CharacterLength.ms))
scale(tt$CharacterLength.ms)[,1]
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = scale(tt$CharacterLength.ms)[,1],
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
tt$rt <- (tt$rt - mean(tt$rt))/sd(tt$rt)
tt$scale_character_length <- (tt$CharacterLength.ms - mean(tt$CharacterLength.ms))/sd(tt$CharacterLength.ms)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
chains = 1, iter = 50)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
cores = 4, chains = 4, iter = 60, warmup = 20)
summary(tt)
exp(0)
exp(0)
exp(-10000000000000000)
exp(-1000000)
exp(-1)
exp(-10)
exp(-100)
exp(-1000)
tt$rt <- (tt$rt - mean(tt$rt))/2*sd(tt$rt)
tt$scale_character_length <- (tt$CharacterLength.ms - mean(tt$CharacterLength.ms))/2*sd(tt$CharacterLength.ms)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
cores = 4, chains = 4, iter = 60, warmup = 20)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
tt$rt <- (tt$rt - mean(tt$rt))/2*sd(tt$rt)
tt$scale_character_length <- (tt$CharacterLength.ms - mean(tt$CharacterLength.ms))/2*sd(tt$CharacterLength.ms)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
cores = 4, chains = 4, iter = 60, warmup = 20)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/2*sd(tt$rt)
tt$scale_character_length <- (tt$CharacterLength.ms - mean(tt$CharacterLength.ms))/2*sd(tt$CharacterLength.ms)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
#                     factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
cores = 4, chains = 4, iter = 60, warmup = 20)
print(eg_stan_exp, pars = c("beta0","beta","beta_s0","beta_s","beta_t0","beta_t"), probs = c(0.025,0.5,0.975))
tt<- subset(tt, RT.ms <= 8000 & RT.ms >= -1000)
# I should really try with a lower cutoff. 4s? Done now; doesn't improve fit.
tt$rt <- tt$RT.ms
tt$N_Early <- ifelse(tt$Early.Late == "early",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
#tt$N_AgeThree <- ifelse(tt$Age == "Adult",0,1)#model.matrix(~tt$Age)[,2]
tt$N_E_P_Interact <- tt$N_Pred * tt$N_Early
tt$N_Early_AgeFive_Interact <-  tt$N_Early * tt$N_AgeFive
tt$N_Early_AgeThree_Interact <- tt$N_Early * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Early_Pred_AgeFive_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeFive
tt$N_Early_Pred_AgeThree_Interact <- tt$N_Early * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- (tt$rt - mean(tt$rt))/2*sd(tt$rt)
tt$scale_character_length <- (tt$CharacterLength.ms - mean(tt$CharacterLength.ms))/2*sd(tt$CharacterLength.ms)
ggplot(tt,aes(x=rt,..density..,col=Pred))+ geom_freqpoly(alpha=1,lwd =1.5, bins = 50)+xlab("Response Time (ms)")+facet_wrap(Early.Late ~ Age) + xlim(c(-2,4))
# For some reason, model won't converge with RTs above zero?
#tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
stanDat_full <- list(rt = tt$rt,
factor1 = tt$N_Early,
factor2 = tt$N_Pred,
factor3 = tt$N_AgeFive,
factor4 = tt$N_AgeThree,
factor5 = tt$N_E_P_Interact,
factor6 = tt$N_Early_AgeFive_Interact,
factor6a = tt$N_Early_AgeThree_Interact,
factor7 = tt$N_Pred_AgeFive_Interact,
factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Early_Pred_AgeFive_Interact,
factor8a = tt$N_Early_Pred_AgeThree_Interact,
#                     factor9 = tt$scale_character_length,
N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan_exp <- stan(file="fixEf_Age_and_Conds_transf_expt2.stan",
data=stanDat_full,
iter = 60, warmup = 20)
