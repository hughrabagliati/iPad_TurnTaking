tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
timefit(subset(tt, Match == "Match")$rt)
timefit(subset(tt, Match == "Mismatch")$rt)
timefit(subset(tt, Pred == "Pred")$rt)
timefit(subset(tt, Pred == "Unpred")$rt)
timefit(subset(tt, Age == "Adult")$rt)
timefit(subset(tt, Age == "Three")$rt)
timefit(subset(tt, Age == "Five")$rt)
summary(eg_stan)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
setwd("~/GitHub/iPad_TurnTaking/DistrAnalyses/STAN_Analysis/SimpleAnalysis")
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
library(retimes)
library(rstan)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_transf.stan",
data=stanDat,
iter=1000, warmup = 500, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
setwd("~/GitHub/iPad_TurnTaking/DistrAnalyses/STAN_Analysis/FullAnalysis")
library(retimes)
library(rstan)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
# STAN model for ex-Gaussian fit - Age Only
#stanDat <- list(rt = tt$rt,factor1 = tt$N_AgeFive,factor2 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
#eg_stan <- stan(file="fixEf_AgeOnly.stan",
#                data=stanDat,
#                iter=2000, warmup = 1000, chains = 2)
#print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
nrow(tt)
length(tt$rt)
library(retimes)
library(rstan)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
# STAN model for ex-Gaussian fit - Full model
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, factor5 = tt$N_M_P_Interact,
factor6 = tt$N_Match_AgeFive_Interact, factor6a = tt$N_Match_AgeThree_Interact, factor7 = tt$N_Pred_AgeFive_Interact, factor7a = tt$N_Pred_AgeThree_Interact,
factor8 = tt$N_Match_Pred_AgeFive_Interact, factor8a = tt$N_Match_Pred_AgeThree_Interact, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Transf3.stan",
data=stanDat,
iter=2000, warmup = 1000, chains = 2)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
?rexgauss
hist(rexgauss(800,130,240))
hist(rexgauss(1000,800,130,240))
hist(rexgauss(1000,800,130,440))
hist(rexgauss(100000,800,130,440))
hist(rexgauss(100000,800,150,640))
hist(rexgauss(100000,800,150,240))
hist(tt$rt)
hist(subset(tt, Age == "Adult")$rt)
hist(subset(tt, Age == "Adult")$rt, breaks = 10)
hist(subset(tt, Age == "Adult")$rt, breaks = 20)
dexgauss(100)
dexgauss(rep(1:100))
hist(dexgauss(rep(1:100)))
hist(dexgauss(rep(1:10000)))
hist(dexgauss(subset(tt, Age == "Adult")$rt))
hist(subset(tt, Age == "Adult")$rt, breaks = 20)
curve(dexGAUS(x, mu=800 ,sigma=150,nu=230), 100, 600,add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
library(gamlss.dist)
curve(dexGAUS(x, mu=800 ,sigma=150,nu=230), 100, 600,add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
?curve
?hist
hist(subset(tt, Age == "Adult")$rt, breaks = 20, freq = FALSE)
curve(dexGAUS(x, mu=800 ,sigma=150,nu=230), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
curve(dexGAUS(x, mu=802.79 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
hist(subset(tt, Age == "Adult")$rt, breaks = 40, freq = FALSE)
curve(dexGAUS(x, mu=802.79 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
curve(dexGAUS(x, mu=832.79 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
curve(dexGAUS(x, mu=1000 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
curve(dexGAUS(x, mu=950 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
hist(subset(tt, Age == "Adult")$rt, breaks = 40, freq = FALSE)
curve(dexGAUS(x, mu=950 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
library(retimes)
library(rstan)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
hist(subset(tt, Age == "Adult")$rt, breaks = 40, freq = FALSE)
curve(dexGAUS(x, mu=802.8 ,sigma=133,nu=238.3), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
timefit(subset(tt, Age == "Adult")$rt)
curve(dexGAUS(x, mu=937 ,sigma=174,nu=302), add = T,
main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
ggplot(tt,aes(x=rt)) +
geom_histogram(data=subset(tt,Age == "Adult"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(tt,Age == "Five"),fill = "blue", alpha = 0.2) +
geom_histogram(data=subset(tt,Age == "Three"),fill = "green", alpha = 0.2)
?geom_histogram
ggplot(tt,aes(x=rt, fill = "Age")) +
geom_histogram(alpha = 0.2)
ggplot(tt,aes(x=rt, fill = Age)) +
geom_histogram(alpha = 0.2)
ggplot(tt,aes(x=rt, fill = Age)) +
geom_histogram(alpha = 0.3)
?ggplot
ggplot(tt,aes(x=rt, group = Age)) +
geom_histogram(alpha = 0.3)
ggplot(tt,aes(x=rt)) +
geom_histogram(alpha = 0.3)+facet_grid(.~Age)
?geom_histogram
ggplot(tt,aes(x=rt)) +
geom_freqpoly(alpha = 0.3)+facet_grid(.~Age)
ggplot(tt,aes(x=rt,..density..)) +
geom_freqpoly(alpha = 0.3)+facet_grid(.~Age)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.3)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.9)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.3, lwd = 3)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.3, lwd = 2)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.8, lwd = 2)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.7, lwd = 2)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.4, lwd = 3)
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.4, lwd = 3)
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 0.4, lwd = 5)
?xlab
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1)+xlab("Response Time (ms)")
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1,binwidth = 200)+xlab("Response Time (ms)")
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1,binwidth = 100)+xlab("Response Time (ms)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1,binwidth = 100)+xlab("Response Time (ms)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1,binwidth = 100)+xlab("Response Time (ms)")
ggplot(tt,aes(x=rt,..density.., col = Age)) +
geom_freqpoly(alpha = 1, lwd = 1,binwidth = 150)+xlab("Response Time (ms)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
ggplot(tt,aes(x=rt,..density..,col=Age))+ geom_freqpoly(alpha=1,lwd =1.5,binwidth=150)+xlab("Response Time (ms)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
ggplot(tt,aes(x=rt,..density..,col=Age))+ geom_freqpoly(alpha=1,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
ggplot(tt,aes(x=rt,..density..,col=Age, linetype == "Pred"))+ geom_freqpoly(alpha=1,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
library(retimes)
library(rstan)
library(ggplot2)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
ggplot(tt,aes(x=rt,..density..,col=Age, linetype == Pred))+ geom_freqpoly(alpha=1,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
summary(tt)
ggplot(tt,aes(x=rt,..density..,col=Age, lty == Pred))+ geom_freqpoly(alpha=0.8,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
ggplot(tt,aes(x=rt,..density..,col=Age, linetype = Pred))+ geom_freqpoly(alpha=0.8,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
ggplot(tt,aes(x=rt,..density..,col=Age, linetype = Match))+ geom_freqpoly(alpha=0.8,lwd =1.5,binwidth=150)+xlab("Response Time (msss)")
