qnorm(0.5)
qnorm(0.975) - qnorm(16)
qnorm(0.975) - qnorm(0.16)
qnorm(0.84) - qnorm(0.5)
qnorm(0.975) - qnorm(0.84)
qnorm(0.50) - qnorm(0.16)
setwd("~/")
load("~/Dropbox/ETAutism/ET_Mar26-2013.RDATA")
# Data Analysis Scripts
# Function to shuffle condition labels assuming that we hold groups of trials constant. i.e., does the same as shuffling averaged data.
# Function to shuffle the condition label then compute the same stats as above
# This does the resampling on your data.
resample = function(data_file,StartTime,EndTime,StepSize){
summaryBy(Trial~Subj+Trial+Cond+Strength+Pop, data = data_file ) -> Trials
shuf.fnc <- function(x){
NewCond <- x$Cond[sample.int(length(x$Cond))]
NewStrength <- x$Strength[sample.int(length(x$Strength))]
return(data.frame(x,NewCond,NewStrength))
}
Trials = ddply(Trials, .(Subj), shuf.fnc)
for (i in unique(data_file$Subj)){
data_file_S = data_file[data_file$Subj == i,]
data_file_S.prac = data_file_S
for (j in unique(data_file_S.prac$Trial)){
data_file_S[ data_file_S.prac$Trial == j,]$Cond =  rep(as.character(Trials[Trials$Subj == i & Trials$Trial == j,]$NewCond),length(data_file_S[ data_file_S.prac$Trial == j,]$Cond))
data_file_S[ data_file_S.prac$Trial == j,]$Strength =  rep(as.character(Trials[Trials$Subj == i & Trials$Trial == j,]$NewStrength),length(data_file_S[ data_file_S.prac$Trial == j,]$Strength))
}
data_file[data_file$Subj == i,] = data_file_S
}
Trials <- summaryBy(Subj~Subj+Pop, data = Trials)
Trials$Order = NA
Trials$Order = sample.int(length(Trials$Order),length(Trials$Order))
Trials$Pop = Trials[order(Trials$Order),]$Pop
#print(Trials$Pop)
for (i in unique(data_file$Subj)){
data_file[data_file$Subj == i,]$Pop = Trials[Trials$Subj == i,]$Pop
}
data_file$Cond = as.factor(data_file$Cond)
data_file$Strength = as.factor(data_file$Strength)
data_file$Pop = as.factor(data_file$Pop)
contrasts(data_file$Cond)[1] <- -1
contrasts(data_file$Cond)[2] <- 1
contrasts(data_file$Strength)[2] <- 1
contrasts(data_file$Strength)[1] <- -1
contrasts(data_file$Pop)[2] <- 1
contrasts(data_file$Pop)[1] <- -1
#	print(data_file[data_file$Subj == i,]$Pop[1:30])
#       print(data_file[data_file$Subj == i,]$Trial[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Cond[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Strength[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Score[seq(300,1000, by = 25)])
stats.resample = calculate.statistics(data_file,StartTime,EndTime,StepSize)
return(stats.resample)
}
# Cluster finding function and pval finding function
# Cluster finding script (written by Jon Brennan )
find.clusters <- function(pval.vector, tval.vector, latencies, alpha=.05, cluster.size=5,signed =FALSE, sign = "pos") {
binary.stat <- as.numeric(pval.vector < alpha)
tval.stat <- rep(0,length(binary.stat))
tval.stat[2:length(binary.stat)] = ((tval.vector[2:length(binary.stat)] * tval.vector[1:(length(binary.stat)-1)]) <0)
cluster.start <- c()
cluster.end <- c()
cluster.stat <- c()
in.cluster <- 0
found.clusters <- 0
new.end <- 0
new.start <- 0
end.cluster <- 0
for (n in 1:length(binary.stat)) {
if (signed == FALSE){
if (in.cluster == 0 && binary.stat[n] == 1 ) {
new.start = n
in.cluster = 1
}
}else
if (sign == "pos"){
if (in.cluster == 0 && binary.stat[n] == 1 && tval.vector[n] >= 0) {
new.start = n
in.cluster = 1
}
}else
if (in.cluster == 0 && binary.stat[n] == 1 && tval.vector[n] <= 0) {
new.start = n
in.cluster = 1
}
if (in.cluster == 1 && binary.stat[n] == 0) {
new.end = n
end.cluster = 1
in.cluster = 0
}
if (in.cluster == 1 && tval.stat[n] == 1) {
new.end = n
end.cluster = 1
in.cluster = 0
}
# in case we reach the end and we are still "in" a cluster...
if (in.cluster == 1 && binary.stat[n] == 1 && n == length(binary.stat)) {
new.end = n
end.cluster = 1
in.cluster = 1
}
if (end.cluster) {
if ((new.end - new.start) >= cluster.size) {
found.clusters <- found.clusters + 1
cluster.start<- c(cluster.start, latencies[new.start])
cluster.end <- c(cluster.end, latencies[new.end])
cluster.stat <- c(cluster.stat, sum(abs(tval.vector[new.start:(new.end-1)])))
}
end.cluster = 0
}
}
cluster.out <- data.frame(start = cluster.start, end = cluster.end, cluster.stat = cluster.stat)
return(cluster.out)
}
# Script for assigning pvals to clusters
pval = function(sample.cluster,resample.large.cluster){
sample.cluster$pval = 1
for (i in 1:length(sample.cluster$cluster.stat)){
print(i)
sample.cluster$pval[i] = 1 - sum(as.numeric(sample.cluster$cluster.stat[i]>resample.large.cluster)/Resamples_N)
}
return(sample.cluster)
}
# What analysis will we be doing at each time point?
calculate.statistics = function(data_file,StartTime,EndTime,StepSize){
#Load the relevant libraries
require("lme4")
require(multicore)
require(doMC)
require(foreach)
require(plyr)
#Start the multicore machine!
#Split the data frame into a list for each timepoint
a = split(data_file[data_file$Time >= StartTime & data_file$Time <= EndTime,],data_file[data_file$Time >= StartTime & data_file$Time <= EndTime,]$Time)
#Parallel application of lmer and coefficient extraction, outputs another list as above
mclapply(a,function(x) coef(summary(lmer(Score~Cond*Strength*Pop +(1+Cond*Strength|Subj) , data = x)))[2:8,1:3]) -> a.co
# Evaluate the list to see whether t value meets a threshold (hard coded)
lapply(a.co,function(x) data.frame(x,pv = ifelse(abs(x[,3]) > 1.6,0.04,0.06), co = rownames(x))) -> k
# plyr that list into a dataframe
k.df = ldply(k)
k.df$.id = as.numeric(k.df$.id)
colnames(k.df) <- c("Time", "Estimate","SE", "Stat", "pval","Coef")
k.df$Coef = ordered(k.df$Coef,levels = c("CondU","Strengthweak","PopControl","CondU:Strengthweak","CondU:PopControl","Strengthweak:PopControl", "CondU:Strengthweak:PopControl"))
#Split that dataframe into a list based on the regression coefficients
stats.sample = split(k.df,k.df$Coef)
return(stats.sample)
}
# What analysis will we be doing at each time point?
calculate.statistics.nopop = function(data_file,StartTime,EndTime,StepSize){
require("lme4")
require(multicore)
require(doMC)
require(foreach)
require(plyr)
a = split(data_file[data_file$Time >= StartTime & data_file$Time <= EndTime,],data_file[data_file$Time >= 0 & data_file$Time <= 1500,]$Time)
mclapply(a,function(x) coef(summary(lmer(Score~Cond*Strength +(1+Cond+Strength|Subj) + (1+Cond+Strength|Trial), data = x)))[2:4,1:3]) -> a.co
lapply(a.co,function(x) data.frame(x,pv = ifelse(abs(x[,3]) > 1.6,0.04,0.06), co = rownames(x))) -> k
k.df = ldply(k)
k.df$.id = as.numeric(k.df$.id)
colnames(k.df) <- c("Time", "Estimate","SE", "Stat", "pval","Coef")
k.df$Coef = ordered(k.df$Coef,levels = c("CondU","Strengthweak","CondU:Strengthweak"))
stats.sample = split(k.df,k.df$Coef)
return(stats.sample)
}
pval = function(sample.cluster,resample.large.cluster){
sample.cluster$pval = 1
for (i in 1:length(sample.cluster$cluster.stat)){
print(i)
sample.cluster$pval[i] = 1 - sum(as.numeric(sample.cluster$cluster.stat[i]>resample.large.cluster)/Resamples_N)
}
return(sample.cluster)
}
# Data Analysis Scripts
# Function to shuffle condition labels assuming that we hold groups of trials constant. i.e., does the same as shuffling averaged data.
# Function to shuffle the condition label then compute the same stats as above
# This does the resampling on your data.
resample.nopop = function(data_file,StartTime,EndTime,StepSize){
summaryBy(Trial~Subj+Trial+Cond+Strength+Pop, data = data_file ) -> Trials
Trials$Order = NA
Trials$NewCond = Trials$Cond
Trials$NewStrength = Trials$Strength
Trials$NewPop = Trials$Pop
for (i in unique(Trials$Subj)){
Trials[Trials$Subj == i,]$Order = sample.int(length(Trials[Trials$Subj == i,]$Cond),length(Trials[Trials$Subj == i,]$Cond))
Trials[Trials$Subj == i,]$NewCond = Trials[ order(Trials[Trials$Subj == i,]$Order),]$Cond
#Trials[Trials$Subj == i,]$NewOrder = sample.int(length(Trials[Trials$Subj == i,]$Cond),length(Trials[Trials$Subj == i,]$Cond))
Trials[Trials$Subj == i,]$NewStrength = Trials[ order(Trials[Trials$Subj == i,]$Order),]$Strength
}
for (i in unique(data_file$Subj)){
data_file_S = data_file[data_file$Subj == i,]
data_file_S.prac = data_file_S
for (j in unique(data_file_S.prac$Trial)){
data_file_S[ data_file_S.prac$Trial == j,]$Cond =  rep(as.character(Trials[Trials$Subj == i & Trials$Trial == j,]$NewCond),length(data_file_S[ data_file_S.prac$Trial == j,]$Cond))
data_file_S[ data_file_S.prac$Trial == j,]$Strength =  rep(as.character(Trials[Trials$Subj == i & Trials$Trial == j,]$NewStrength),length(data_file_S[ data_file_S.prac$Trial == j,]$Strength))
}
data_file[data_file$Subj == i,] = data_file_S
}
Trials <- summaryBy(Subj~Subj+Pop, data = Trials)
Trials$Order = NA
Trials$Order = sample.int(length(Trials$Order),length(Trials$Order))
Trials$Pop = Trials[order(Trials$Order),]$Pop
#print(Trials$Pop)
for (i in unique(data_file$Subj)){
data_file[data_file$Subj == i,]$Pop = Trials[Trials$Subj == i,]$Pop
}
data_file$Cond = as.factor(data_file$Cond)
data_file$Strength = as.factor(data_file$Strength)
data_file$Pop = as.factor(data_file$Pop)
contrasts(data_file$Cond)[1] <- -1
contrasts(data_file$Cond)[2] <- 1
contrasts(data_file$Strength)[2] <- 1
contrasts(data_file$Strength)[1] <- -1
#contrasts(data_file$Pop)[2] <- 1
#contrasts(data_file$Pop)[1] <- -1
#	print(data_file[data_file$Subj == i,]$Pop[1:30])
#       print(data_file[data_file$Subj == i,]$Trial[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Cond[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Strength[seq(300,1000, by = 25)])
#        print(data_file[data_file$Subj == i,]$Score[seq(300,1000, by = 25)])
stats.resample = calculate.statistics.nopop(data_file,StartTime,EndTime,StepSize)
return(stats.resample)
}
StartTime = 0
EndTime = 1500
StepSize = 100
# Get the relevant stats for your data file.
registerDoMC();
stats.sample = calculate.statistics(ET,StartTime,EndTime,StepSize)
stats.sample
install.packages(c("pbkrtest", "sp"))
setwd("~/GitHub/iPad_TurnTaking/DistrAnalyses/STAN_Analysis")
library(retimes)
library(rstan)
ads <- read.csv("Adult_R.csv")
fives <- read.csv("5yo_R.csv")
threes <- read.csv("3yo_R.csv")
ads$Age <- "Adult"
fives$Age <- "Five"
threes$Age <- "Three"
tt <- rbind(ads,fives,threes)
tt$Age <- as.factor(tt$Age)
tt$Subject <- paste(tt$Age,tt$Participant, sep = "")
tt<- subset(tt, RTms <= 8000)
tt$rt <- tt$RTms
tt$N_Match <- ifelse(tt$Match == "Match",0,1)
tt$N_Pred <- ifelse(tt$Pred == "Pred",0,1)
tt$N_AgeFive <- model.matrix(~tt$Age)[,2]
tt$N_AgeThree <- model.matrix(~tt$Age)[,3]
tt$N_M_P_Interact <- tt$N_Pred * tt$N_Match
tt$N_Match_AgeFive_Interact <-  tt$N_Match * tt$N_AgeFive
tt$N_Match_AgeThree_Interact <- tt$N_Match * tt$N_AgeThree
tt$N_Pred_AgeFive_Interact <- tt$N_Pred * tt$N_AgeFive
tt$N_Pred_AgeThree_Interact <- tt$N_Pred * tt$N_AgeThree
tt$N_Match_Pred_AgeFive_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeFive
tt$N_Match_Pred_AgeThree_Interact <- tt$N_Match * tt$N_Pred * tt$N_AgeThree
# For some reason, model won't converge with RTs above zero?
tt$rt_scale <- (tt$rt - mean(tt$rt,na.rm = T))/sd(tt$rt, na.rm = T)
tt$rt <- tt$rt + abs(min(tt$rt))
# Fit Ex-Gaussian using ML (retimes library)
eg_ml <- timefit(tt$rt)
print(eg_ml)
timefit(tt$rt_scale)
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt_scale,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
# STAN model for ex-Gaussian fit - Age and Conds
stanDat <- list(rt = tt$rt,factor1 = tt$N_Match,factor2 = tt$N_Pred,factor3 = tt$N_AgeFive,factor4 = tt$N_AgeThree, N = nrow(tt), J = nlevels(as.factor(tt$Subject)), Subj = as.integer(as.factor(tt$Subject)))
eg_stan <- stan(file="fixEf_Age_and_Conds_priors_on_mu.stan",
data=stanDat,
iter=500, warmup = 200, chains = 1)
print(eg_stan, pars = c("beta","beta_s","beta_t"), probs = c(0.025,0.5,0.975))
